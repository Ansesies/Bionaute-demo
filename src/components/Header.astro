---
// No necesitamos importar HeaderScript, ya que no podemos usarlo con client:load
---

<header class="fixed w-full z-50 transition-all duration-300" id="header">
  <div class="container mx-auto px-4 md:px-6 py-1">
    <div class="flex items-center justify-between">
      <!-- Logo -->
      <div class="flex-shrink-0 transform transition-transform duration-500 hover:scale-105">
        <a href="/" class="block">
          <img 
            src="/logo_bionaute.png" 
            alt="Bionaute" 
            class="h-10 md:h-12 w-auto" 
            loading="eager"
          />
        </a>
      </div>
      
      <!-- Menú de navegación para pantallas medianas y grandes -->
      <nav class="hidden md:flex items-center space-x-8">
        <a href="/" class="nav-link text-white hover:text-green-300 transition-colors duration-300 font-medium">Home</a>
        <a href="/about" class="nav-link text-white hover:text-green-300 transition-colors duration-300 font-medium">About</a>
        <a href="/services" class="nav-link text-white hover:text-green-300 transition-colors duration-300 font-medium">Services</a>
        <a href="/news" class="nav-link text-white hover:text-green-300 transition-colors duration-300 font-medium">News</a>
        <a href="/contact" class="nav-link text-white hover:text-green-300 transition-colors duration-300 font-medium">Contact</a>
      </nav>
      
      <!-- Botón para menú móvil -->
      <button 
        id="mobile-menu-button"
        class="md:hidden flex items-center p-2 rounded-md text-white hover:bg-emerald-700 transition-colors duration-300"
        aria-label="Toggle menu"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
    </div>
    
    <!-- Menú móvil (oculto por defecto) -->
    <div id="mobile-menu" class="md:hidden hidden mt-2 rounded-md bg-gradient-to-r from-emerald-800/95 to-teal-800/95 backdrop-blur-lg shadow-xl border border-emerald-600/20 transform transition-all duration-300 origin-top scale-y-0 opacity-0">
      <div class="px-2 pt-2 pb-3 space-y-1">
        <a href="/" class="block px-3 py-2 rounded-md text-white hover:bg-emerald-700/80 transition-colors duration-300 font-medium">Home</a>
        <a href="/about" class="block px-3 py-2 rounded-md text-white hover:bg-emerald-700/80 transition-colors duration-300 font-medium">About</a>
        <a href="/services" class="block px-3 py-2 rounded-md text-white hover:bg-emerald-700/80 transition-colors duration-300 font-medium">Services</a>
        <a href="/news" class="block px-3 py-2 rounded-md text-white hover:bg-emerald-700/80 transition-colors duration-300 font-medium">News</a>
        <a href="/contact" class="block px-3 py-2 rounded-md text-white hover:bg-emerald-700/80 transition-colors duration-300 font-medium">Contact</a>
      </div>
    </div>
  </div>
</header>

<style>
  /* Header styles */
  header {
    background: linear-gradient(90deg, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.6) 100%);
    width: 100%;
    max-width: 100vw;
    overflow-x: hidden;
  }
  
  /* Container responsive */
  header .container {
    width: 100%;
    max-width: 100%;
    padding-left: 1rem;
    padding-right: 1rem;
  }
  
  @media (max-width: 375px) {
    header .container {
      padding-left: 0.75rem;
      padding-right: 0.75rem;
    }
  }
  
  /* Menú móvil mejoras */
  #mobile-menu {
    width: 100%;
    max-width: 100%;
    left: 0;
    right: 0;
  }
  
  /* Animaciones */
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  .nav-link {
    position: relative;
    padding: 0.25rem 0;
  }
  
  .nav-link::after {
    content: '';
    position: absolute;
    width: 0;
    height: 2px;
    bottom: 0;
    left: 0;
    background-color: rgb(134, 239, 172); /* green-300 */
    transition: width 0.3s ease-in-out;
  }
  
  .nav-link:hover::after {
    width: 100%;
  }
  
  /* Botón hamburguesa mejorado */
  #mobile-menu-button {
    touch-action: manipulation;
    -webkit-tap-highlight-color: transparent;
  }
  
  /* Mejoras para la transición del menú móvil */
  #mobile-menu.scale-y-100 {
    transform: scaleY(1);
  }
  
  #mobile-menu.opacity-100 {
    opacity: 1;
  }
</style>

<!-- Script para la funcionalidad del header -->
<script>
  // Script enfocado únicamente en la funcionalidad del header
  
  // Función para inicializar el header
  function initializeHeader() {
    console.log('Header: Inicializando');
    
    // Configurar el menú móvil
    setupMobileMenu();
    
    // Configurar comportamiento de scroll
    setupScrollBehavior();
  }
  
  // Configurar el menú móvil
  function setupMobileMenu() {
    const menuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    
    if (menuButton && mobileMenu) {
      // Limpiar eventos anteriores
      const newButton = menuButton.cloneNode(true);
      menuButton.parentNode?.replaceChild(newButton, menuButton);
      
      newButton.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        console.log('Toggle menú móvil');
        
        // Toggle del menú
        const isHidden = mobileMenu.classList.contains('hidden');
        
        if (isHidden) {
          // Mostrar menú
          mobileMenu.classList.remove('hidden');
          // Usar setTimeout para permitir que se renderice antes de la animación
          setTimeout(() => {
            mobileMenu.classList.remove('scale-y-0', 'opacity-0');
            mobileMenu.classList.add('scale-y-100', 'opacity-100');
          }, 10);
        } else {
          // Ocultar menú
          mobileMenu.classList.remove('scale-y-100', 'opacity-100');
          mobileMenu.classList.add('scale-y-0', 'opacity-0');
          // Esperar a que termine la animación antes de ocultar
          setTimeout(() => {
            mobileMenu.classList.add('hidden');
          }, 300);
        }
      });
      
      // Cerrar menú al hacer click en los enlaces
      const menuLinks = mobileMenu.querySelectorAll('a');
      menuLinks.forEach(link => {
        link.addEventListener('click', () => {
          mobileMenu.classList.remove('scale-y-100', 'opacity-100');
          mobileMenu.classList.add('scale-y-0', 'opacity-0');
          setTimeout(() => {
            mobileMenu.classList.add('hidden');
          }, 300);
        });
      });
    }
  }
  
  // Configurar comportamiento de scroll (header transparente a sólido)
  function setupScrollBehavior() {
    const header = document.getElementById('header') as HTMLElement | null;
    if (!header) return;
    
    // Función para actualizar apariencia según scroll
    function updateHeaderOnScroll() {
      // Verificar que header siga existiendo en cada llamada
      const headerElement = document.getElementById('header');
      if (!headerElement) return;
      
      const scrollY = window.scrollY || document.documentElement.scrollTop;
      
      if (scrollY > 50) {
        headerElement.classList.add('scrolled');
        (headerElement as HTMLElement).style.background = 'linear-gradient(90deg, rgba(0,0,0,0.9) 0%, rgba(0,0,0,0.8) 100%)';
      } else {
        headerElement.classList.remove('scrolled');
        (headerElement as HTMLElement).style.background = 'linear-gradient(90deg, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.6) 100%)';
      }
    }
    
    // Verificar inicialmente
    updateHeaderOnScroll();
    
    // Escuchar eventos de scroll
    window.addEventListener('scroll', updateHeaderOnScroll);
  }
  
  // Inicializar cuando el DOM está listo
  initializeHeader();
  
  // Re-inicializar en eventos de Astro
  document.addEventListener('astro:page-load', initializeHeader);
  
  // También verificar cuando la página está completamente cargada
  window.addEventListener('load', initializeHeader);
</script>